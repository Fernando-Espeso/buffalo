{% schema %}
{
  "name": "Buffalo-live",
  "settings": [],
  "blocks": [
    {
      "type": "item",
      "name": "Elemento",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Imagen"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Enlace"
        },
        {
          "type": "text",
          "id": "caption",
          "label": "Texto (caption)"
        },
        {
          "type": "select",
          "id": "role",
          "label": "Categoría",
          "options": [
            { "value": "photographer", "label": "Photographer" },
            { "value": "director", "label": "Director" },
            { "value": "fashion_editor", "label": "Fashion Editor" },
            { "value": "hot_picks", "label": "Hot Picks" },
            { "value": "directors", "label": "Directors" }
          ]
        },
        {
          "type": "text",
          "id": "name",
          "label": "Nombre"
        }
      ]
    }
    
  ],
  "presets": [
    {
      "name": "Buffalo Live",
      "category": "Custom"
    }
  ]
}
{% endschema %}

{% assign roles_string = "" %}
{% for block in section.blocks %}
  {% assign role = block.settings.role %}
  {% unless roles_string contains role %}
    {% assign roles_string = roles_string | append: role | append: "," %}
  {% endunless %}
{% endfor %}

{% assign roles = roles_string | split: "," %}
{% assign roles = roles | uniq %}

<div class="category-filters">
  {% for role in roles %}
    {% unless role == "" %}
      <details class="category-item" data-role="{{ role }}">
        <summary>{{ role | replace: "_", " " | capitalize }}</summary>
        <ul class="names-list" id="names-{{ role | handle }}"></ul>
      </details>
    {% endunless %}
  {% endfor %}
</div>

<div class="swiper-live">
    <div class="swiper-wrapper">
      {% for block in section.blocks %}
        {% assign img = block.settings.image %}
        {% assign link = block.settings.link %}
        {% assign caption = block.settings.caption %}
        
        <div class="swiper-slide" data-role="{{ block.settings.role }}" data-name="{{ block.settings.name }}">
          {% if block.settings.link != blank %}
            <a href="{{ block.settings.link }}">
          {% endif %}
        
          {% if block.settings.image != blank %}
            <img src="{{ block.settings.image | img_url: 'medium' }}" alt="{{ block.settings.caption }}">
          {% endif %}
        
          {% if block.settings.caption != blank %}
            <p class="caption">{{ block.settings.caption }}</p>
          {% endif %}
        
          {% if block.settings.link != blank %}
            </a>
          {% endif %}
        </div>
      {% endfor %}
    </div>
  </div>
  
  <div class="swiper-pagination"></div>

<style>
    .swiper-pagination-bullet-active {
        opacity: black;
        background: black;
        margin:0px;
    }
    .swiper-pagination-bullet {
        margin: 0px !important;
    }
    .swiper-slide img {
        transition: transform 0.3s ease;
        cursor: pointer;
        z-index: 1;
    }
    .swiper-slide img.expanded {
        transform: scale(2);
        z-index: 10;
        position: relative;
    }
</style>
<script>
  const swiper = new Swiper('.swiper-live', {
    direction: 'horizontal',
    slidesPerView: 9.5,
    loopedSlides: 20,
    spaceBetween: 3,
    pagination: {
      el: '.swiper-pagination',
      clickable: true,
      renderBullet: function (index, className) {
        return `<span class="${className}"></span>`;
      }
    },
  });

  // Escuchar clicks en las imágenes del swiper
  document.querySelectorAll('.swiper-live .swiper-slide img').forEach(img => {
    img.addEventListener('hover', () => {
      // Si ya está expandida, quitar la clase
      const wasExpanded = img.classList.contains('expanded');
      
      // Quitar la clase a todas
      document.querySelectorAll('.swiper-live .swiper-slide img').forEach(i => i.classList.remove('expanded'));

      // Si no estaba expandida, expandir esta
      if (!wasExpanded) {
        img.classList.add('expanded');
      }
    });
  });
</script>
<script>
  let currentRole = null;
  let currentName = null;

  const swiperSlides = document.querySelectorAll('.swiper-slide');

  function updateSlides() {
    swiperSlides.forEach(slide => {
      const role = slide.dataset.role;
      const name = slide.dataset.name;

      const roleMatch = !currentRole || role === currentRole;
      const nameMatch = !currentName || name === currentName;

      slide.style.display = (roleMatch && nameMatch) ? 'opacity' : '0.4';
    });

    if (typeof swiper !== 'undefined') {
      swiper.update();
    }
  }

  // Click manual en summary para controlar apertura/cierre
  document.querySelectorAll('.category-item summary').forEach(summary => {
    summary.addEventListener('click', function (e) {
      e.preventDefault(); // Evitar el toggle automático

      const details = summary.parentElement;
      const selectedRole = details.dataset.role;

      const isSameRole = currentRole === selectedRole;

      // Cerrar todos
      document.querySelectorAll('.category-item').forEach(d => d.removeAttribute('open'));
      document.querySelectorAll('summary').forEach(s => s.classList.remove('active'));
      document.querySelectorAll('.name-btn').forEach(btn => btn.classList.remove('active'));
      currentName = null;

      if (isSameRole) {
        // Si se hace click sobre la misma categoría activa, quitar filtro
        currentRole = null;
        updateSlides();
      } else {
        // Abrir esta y aplicar filtro
        details.setAttribute('open', true);
        summary.classList.add('active');
        currentRole = selectedRole;

        // Rellenar nombres
        const nameList = document.getElementById(`names-${selectedRole.replace(/\s+/g, '-').toLowerCase()}`);
        nameList.innerHTML = '';
        const names = new Set();

        swiperSlides.forEach(slide => {
          if (slide.dataset.role === selectedRole && slide.dataset.name) {
            names.add(slide.dataset.name);
          }
        });

        names.forEach(name => {
          const li = document.createElement('li');
          const button = document.createElement('button');
          button.textContent = name;
          button.classList.add('name-btn');
          button.setAttribute('data-name', name);
          li.appendChild(button);
          nameList.appendChild(li);
        });

        updateSlides();
      }
    });
  });

  // Filtro por nombre
  document.addEventListener('click', function (e) {
    if (e.target.matches('.name-btn')) {
      const selectedName = e.target.dataset.name;

      if (currentName === selectedName) {
        currentName = null;
        e.target.classList.remove('active');
      } else {
        currentName = selectedName;
        document.querySelectorAll('.name-btn').forEach(btn => btn.classList.remove('active'));
        e.target.classList.add('active');
      }

      updateSlides();
    }
  });
</script>


